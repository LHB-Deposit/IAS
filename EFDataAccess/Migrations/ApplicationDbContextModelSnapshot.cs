// <auto-generated />
using System;
using EFDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFDataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFDataAccess.Models.BankService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BankServiceCatalogueId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServiceVerifyMethodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BankServiceCatalogueId");

                    b.HasIndex("ServiceVerifyMethodId");

                    b.ToTable("BankServices");
                });

            modelBuilder.Entity("EFDataAccess.Models.BankServiceCatalogue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BankServiceCatalogues");
                });

            modelBuilder.Entity("EFDataAccess.Models.ServiceVerify", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServiceVerifyMethodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ServiceVerifyMethodId");

                    b.ToTable("ServiceVerifies");
                });

            modelBuilder.Entity("EFDataAccess.Models.ServiceVerifyMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("ServiceVerifyMethods");
                });

            modelBuilder.Entity("EFDataAccess.Models.BankService", b =>
                {
                    b.HasOne("EFDataAccess.Models.BankServiceCatalogue", null)
                        .WithMany("BankServices")
                        .HasForeignKey("BankServiceCatalogueId");

                    b.HasOne("EFDataAccess.Models.ServiceVerifyMethod", null)
                        .WithMany("BankServices")
                        .HasForeignKey("ServiceVerifyMethodId");
                });

            modelBuilder.Entity("EFDataAccess.Models.ServiceVerify", b =>
                {
                    b.HasOne("EFDataAccess.Models.ServiceVerifyMethod", null)
                        .WithMany("ServiceVerifies")
                        .HasForeignKey("ServiceVerifyMethodId");
                });
#pragma warning restore 612, 618
        }
    }
}
